import { nanoid } from "nanoid"

// types
import type { Prisma } from "@prisma/client"

/**
 * Generates a unique slug for a game session based on its type and mode.
 * 
 * - The slug starts with a prefix formed by taking the first two characters of the session's `type` 
 *   and the first three characters of the session's `mode`, both in lowercase.
 * - A unique 8-character identifier is appended to the prefix, generated by `nanoid` and replacing any 
 *   underscores (`_`) with hyphens (`-`).
 * 
 * This slug can be used as a unique identifier for the session.
 * 
 * @param {Object} session - The game session containing type and mode.
 * 
 * @returns {string} - The generated slug in the format `xx-yyy_xxxxxxxx`.
 */
export function generateSlug(
  session: Pick<ClientGameSession, 'type' | 'mode'>,
  isOffline: boolean = false
): string {
  const { type, mode } = session

  /*
   * Creates a prefix by slicing then merging the first
   * characters of session 'type' and 'mode'.
   */
  let prefix = `${type.slice(0, 2).toLowerCase()}-${mode.slice(0, 3).toLowerCase()}`

  if (isOffline) {
    prefix = 'off'
  }

  /* Prevents generating `_` symbol by nanoid. */
  const id = nanoid(8).replace(/_/g, '-')

  return `${prefix}_${id}`
}

/**
 * Provides the fields to include when querying game sessions, optimized for converting the results into a `ClientGameSession` type instance.
 * 
 * - Includes the session's `owner`, along with the associated `collection`, which contains detailed `user` and `cards` information.
 * - Also includes `players` data, with each player's `user` image URL for enhanced client-side rendering.
 * 
 * This setup ensures that all necessary related data is loaded for transforming a session query into a `ClientGameSession` format.
 * 
 * @returns {Prisma.GameSessionInclude} - An object defining the fields to include in session queries.
 */
export function getSessionSchemaIncludeFields() {
  return {
    owner: true,
    collection: {
      include: {
        user: true,
        cards: true
      }
    },
    players: {
      include: {
        user: {
          select: { imageUrl: true }
        }
      }
    }
  } satisfies Prisma.GameSessionInclude
}
