generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId  String  @unique
  username String
  email    String  @unique
  imageUrl String?

  playerProfiles PlayerProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerProfile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  tag      String  @unique
  color    String
  isActive Boolean

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  sessions      GameSession[] @relation("SessionOwner")
  guestSessions GameSession[] @relation("SessionGuest")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSession {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String @unique

  timer        Int
  flippedCards Json
  cards        Json

  status GameStatus

  type      GameType
  mode      GameMode
  tableSize TableSize

  owner   PlayerProfile @relation("SessionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String        @db.ObjectId

  result   Result @relation("OwnerResult", fields: [resultId], references: [id], onDelete: Cascade)
  resultId String @db.ObjectId

  guest   PlayerProfile? @relation("SessionGuest", fields: [guestId], references: [id], onDelete: Cascade)
  guestId String?        @db.ObjectId

  guestResult   Result? @relation("GuestResult", fields: [guestResultId], references: [id], onDelete: Cascade)
  guestResultId String? @db.ObjectId

  continuedAt DateTime?
  finishedAt  DateTime?

  startedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  flips Int  @default(0)
  score Int?

  session      GameSession[] @relation("OwnerResult")
  sessionGuest GameSession[] @relation("GuestResult")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NOTE: It's a question how the cards will be stored exactly.
// Images will potentially be handled by a cdn, but the cards
// must have a custom ID - and in the future, it would be a good
// feature also, if users could upload their custom image sets
// to create custom memory cards.
// I just leave this as a note because for now cards
// will be random generated for every session
// and saved in JSON.

// model MemoryCard {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   key String @unique
//   imageUrl String @unique
// }

// ENUMS
enum GameStatus {
  RUNNING
  FINISHED
  ABANDONED
  OFFLINE
}

enum GameType {
  CASUAL
  COMPETITIVE
}

enum GameMode {
  SINGLE
  PVP
  COOP
}

enum TableSize {
  SMALL
  MEDIUM
  LARGE
}
