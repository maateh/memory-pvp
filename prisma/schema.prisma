generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"

  namespace = "PrismaJson"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId  String  @unique
  username String
  email    String  @unique
  imageUrl String?

  playerProfiles PlayerProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerProfile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  tag      String  @unique
  color    String
  isActive Boolean

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  sessions   GameSession[] @relation(fields: [sessionIds], references: [id])
  sessionIds String[]      @db.ObjectId

  startedSessions GameSession[] @relation("SessionOwner")

  results Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSession {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique

  type      GameType
  mode      GameMode
  tableSize TableSize

  status GameStatus

  /// [SessionStats]
  stats Json

  /// [MemoryCard]
  flippedCards Json[]
  /// [MemoryCard]
  cards        Json[]

  owner   PlayerProfile @relation("SessionOwner", fields: [ownerId], references: [id])
  ownerId String        @db.ObjectId

  players   PlayerProfile[] @relation(fields: [playerIds], references: [id])
  playerIds String[]        @db.ObjectId

  results Result[]

  continuedAt DateTime?
  closedAt    DateTime?

  startedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  flips   Int
  matches Int
  score   Int?

  player   PlayerProfile @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String        @db.ObjectId

  session   GameSession @relation(fields: [sessionId], references: [id])
  sessionId String      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NOTE: It's a question how the cards will be stored exactly.
// Images will potentially be handled by a cdn, but the cards
// must have a custom ID - and in the future, it would be a good
// feature also, if users could upload their custom image sets
// to create custom memory cards.
// I just leave this as a note because for now cards
// will be random generated for every session
// and saved in JSON.

// model MemoryCard {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   key String @unique
//   imageUrl String @unique
// }

// ENUMS
enum GameStatus {
  RUNNING
  FINISHED
  ABANDONED
  OFFLINE
}

enum GameType {
  CASUAL
  COMPETITIVE
}

enum GameMode {
  SINGLE
  PVP
  COOP
}

enum TableSize {
  SMALL
  MEDIUM
  LARGE
}
